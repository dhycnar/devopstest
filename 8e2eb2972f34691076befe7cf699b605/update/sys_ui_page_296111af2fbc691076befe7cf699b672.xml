<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[//Function to check if the user is reloading or pressing back/forward
//Variable to check if the action on the page is specific to submit/save/cancel on form
//For DEF0235276 to show alert on back & reload

var clickedButton = gel('selection_result');

function navType() {
    var navAction;
    if (window.performance && window.performance.getEntriesByType("navigation").length) {
        navAction = window.performance.getEntriesByType("navigation")[0].type;
        if (navAction == 'reload' || navAction == 'back_forward')
            return true;
    }
}

//For DEF0235276 to show alert on back, forward & reload
window.addEventListener('beforeunload', function(e) {
    if (["save", "cancel", "submit"].includes(clickedButton.value) || !g_form.modified)
        return;
   if (navType()) {
		e.preventDefault();
		// Chrome requires returnValue to be set
		e.returnValue = '';
	}
});

// Function for the back button to go to previous page 
function clickBack(view,query) { 
	if (query != null && query.length > 0) {
		var ga = new GlideAjax("AssessmentUtilsAJAX");                                    
		ga.addParam("sysparm_name","backToAssessmentList");
		ga.addParam("sysparm_query", query);
		ga.addParam("sysparm_view",view);
		ga.getXMLWait(function(answer) { 
		}); 
	} else {
		window.history.go(-1); 
		return false;
	}
}

// Function for navigation in survey completed instances list
 function iterateList1(view, query, row, value, update, totalRows) {
	var ga = new GlideAjax("AssessmentUtilsAJAX");                                    
	ga.addParam("sysparm_name","iterateAssessmentInstance");
	ga.addParam("sysparm_query", query); 
	ga.addParam("sysparm_row", row); 
	ga.addParam("sysparm_value", value); 
	ga.addParam("sysparm_totalr", totalRows);
	ga.addParam("sysparm_view",view);
	ga.getXMLWait(function(answer) { 
	});
}


// Adds survey questions to assessment form object

addLoadEvent(function() {
	var checkSign = gel('signature_result');
	suppressEnterKey($j("input, select"));
	if (checkSign) {
		if (gel('jvar_signature_type').value == 'full_name')
			gel('signature_result').value = g_user.getFullName();
	}
	var ids = {};
	var inputs = $$(".questionSetWidget");
	for (var i = 0; i < inputs.length; i++)
		ids[inputs[i].getAttribute('name')] = true;

	for ( var id in ids) {
		var sysId = id.split(':')[1];
		if (sysId != 'null' && id.indexOf('sys_original') < 0) {
			var status;
			var mandatory;
			var allowNA;
			var nameElement = new NameMapEntry(sysId, id);

			g_form.addNameMapEntry(nameElement);
			status = gel('status.' + id);
			if (status == null) {
				if (window.console)
					console.log("Problem locating element 'status." + id + "'");
			} else {
				mandatory = status.getAttribute('oclass');
				mandatory = mandatory != '' ? true : false;
				allowNA = status.getAttribute('allow_na');
				allowNA = allowNA == 'true' ? true : false;
				var glideUIElement = new GlideUIElement('variable', id, 'string', mandatory, 'null');
				glideUIElement.allowNA = allowNA;
				g_form.addGlideUIElement(glideUIElement);
			}
		}
	}

	$j('form').has( "div.assessment" ).submit(function(e) {
		// Upon form submission, disable submit/save/cancel buttons
		$j('.nav.navbar-right').find('button').attr('disabled', true);
		$j('.assessmentButtonRow').find('button').attr('disabled', true);
	});
});

// Use AssessmentForm instead of the regular glide form for this page
addTopRenderEvent(function() {
	if (!window.g_form) {
		window.g_form = new AssessmentForm('ni', true, true);
		window.g_form.loadQuestionMap();
	}
});

// Toggles labels that are controlled by other labels
function toggleSubLabels(controllerClassName, isExpand) {
	var matches = $(document.body).select('.' + controllerClassName + '--controlled');
	for (var i = 0; i < matches.length; i++) {
		var match = matches[i];
		if(match.getElementsByClassName('toggleOpen')[0])
			match.getElementsByClassName('toggleOpen')[0].style.display = isExpand ? 'none' : '';
		if(match.getElementsByClassName('toggleClosed')[0])
			match.getElementsByClassName('toggleClosed')[0].style.display = isExpand ? '' : 'none';
		match.style.display = isExpand ? '' : 'none';
	}
}

function toggleAssessmentQuestionRows(thisclass, display, fl) {
	forcelabels = false;
	if (fl == true)
		forcelabels = true;
	var rows = $(document.body).select('.' + thisclass);
	for (i = 0; i < rows.length; i++) {
		var element = rows[i];
		var id = element.id;
		var sys_id;
		if(!id){
			var ids = $(element).select("."+"question_label");
			var length = ids.length;
			if(length>0 && ids[length-1] && ids[length-1].id)
				id = ids[length-1].id.substring(6,51);
			sys_id = id.substring(13,45);
		}else{
			sys_id = (id.substring(13,45));
			id = id.substring(0,45);
		}
		if (!id.startsWith('CATEGORY_LABEL:') || forcelabels) {
			if (display === 'none') {
				element.style.display = display;
			}
			else if (!(sys_id in childQuestions)) {
				element.style.display = display;
				var input = $$('#ASMTQUESTION\\:' + sys_id);
				// radio button cases (more than one for scale, none for template):
				if (input.length > 1 || input.length == 0) {
					input = $$('input:checked[type=radio][name="ASMTQUESTION:' + sys_id + '"]');
				if (input.length == 0)
					input = null;
				else
					input = input[0];
			} else
				input = input[0];
			var childValue = '';
			if (input)
				childValue = getInputValue(input);
			if (parentValueChildMap[sys_id]===null)
					continue;
			showDependentQuestions(sys_id,childValue);
			}
		}
	}
	var openStyle='none';
	var closedStyle='none';
	
	if ('none' == display)
		openStyle = '';
	else
		closedStyle = '';
	var s = $(thisclass+'CLOSED');
	s.style.display=closedStyle;
	s = $(thisclass+'OPEN');
	s.style.display=openStyle;

	var overlay_iframe = top.frames[0].$j('.gb_iframe');
	if(overlay_iframe){
		window.setTimeout(function(){
			overlay_iframe.attr("height",parseInt(overlay_iframe.attr("height"))+1);
		},0);
	}

}

function mergeCheckResults(o1, o2) {
	var mergedResults = {};
	for ( var k in o1) {
		mergedResults[k] = o1[k];
	}
	for ( var m in o2) {
		if (m in mergedResults)
			mergedResults[m] += o2[m];
		else
			mergedResults[m] = o2[m];
	}
	return mergedResults;
}

function isEmptyObject(o) {
	for ( var n in o) {
		if (n && true)
			return false;
	}
	return true;
}

function showInvalidFieldsMessage(obj) {
	var totalInvalidCount = 0;

    // loop through each category of survey
    // obj will only have one key (sys_id of metric type) if there are no categories
	for (var categoryID in obj)
		totalInvalidCount += obj[categoryID];

	if (totalInvalidCount > 0) {
		g_form.clearMessages();
		var msg = '';
		var gwtMsg = new GwtMessage();

		if (totalInvalidCount > 1)
			msg = gwtMsg.getMessage('There are {0} questions that do not have a valid response. Please correct these and re-submit', totalInvalidCount);
		else
			msg = gwtMsg.getMessage('There is {0} question that does not have a valid response. Please correct this and re-submit', totalInvalidCount);

		g_form.addErrorMessage(msg);
		return false;
	}
	return true;
}

var isSignValid = 'false';

function submitAssessment() {
	g_form.clearMessages();
	var c = gel('selection_result');
	c.value = 'submit';

	var stringValidateSucceed = g_form.verifyStringQnResponseWhenSubmit();
	if (!stringValidateSucceed)  // abort action if validation fails
		return false;

	var mandatoryResults = g_form.mandatoryCheck();
	var valueResults = g_form.valueCheck();
	var mergedResults = mergeCheckResults(mandatoryResults, valueResults);
	if (!isEmptyObject(mandatoryResults)) {
		var isRequired = document.body.select('.is-required');					
		var isPrefilled = document.body.select('.is-prefilled');
		//scroll to first mandatory field
		if (isRequired.length != 0) {
			window.scrollBy(0, isRequired.first().getBoundingClientRect().y);
		} else if (isPrefilled.length != 0) {
			window.scrollBy(0, isPrefilled.first().getBoundingClientRect().y);
		}
	}

	if (!isEmptyObject(mergedResults))
		return showInvalidFieldsMessage(mergedResults);

	setHiddenQuestions();
	//Calling function to set the modified property of modified fields to false for DEF0230108, this will be called after the modifications are submitted
	resetFieldChangedProperty();
	return validateSignature();
}

function validateSignature() {
	var checkSign = gel('signature_result');
	if (!checkSign)
		return true;
	if (!checkSign.getValue() || !checkSign.getValue().trim()) {
		g_form.clearMessages();
		checkSign.focus();
		g_form.addErrorMessage(getMessage('You must complete the required signature.'));
		return false;
	}
	if (checkSign.getValue().trim()!='checked' && isSignValid === 'false' && gel('jvar_signature_authentication').value === 'true' && gel('jvar_signature_type').value == 'full_name') {
		gel('overlay').show();
		gel('userName').value = g_user.userName;
		gel('user_password').focus();
		return false;
	}
	return true;
}

function setHiddenQuestions() {
	var hiddenQuestions = {};
	var attachmentQuestions = "";
	if (typeof parentValueChildMap == 'undefined' || typeof displayedQuestions == 'undefined')
		return;

	for ( var questionId in parentValueChildMap) {
		if (!(questionId in displayedQuestions)){
			hiddenQuestions[questionId] = true;
			var rankingElement = gel('ASMTQUESTION:'+questionId);
			if(rankingElement && $j(gel('ASMTQUESTION:'+questionId)).attr('datatype') == "ranking"){
				var rankingElements = document.getElementsByClassName(rankingElement.className);
				for(i = 0; i < rankingElements.length; i++) {
					if(rankingElements[i] !== rankingElement){
						hiddenQuestions[rankingElements[i].id.substring(13,45)] = true;
					}
				}
			}
		}
		var element = gel('header_attachment_'+questionId);
		if(element){
			if(attachmentQuestions == "")
				attachmentQuestions +=questionId;
			else
				attachmentQuestions +=","+questionId;
		}
	}
	gel('hiddenQuestions').value = JSON.stringify(hiddenQuestions);
	gel('attachmentQuestions').value = attachmentQuestions;
}

//Function to set the modified property of modified fields to false for DEF0230108
function resetFieldChangedProperty() {
    if (!g_form)
        return;
    for (var i in g_form.modifiedFields) {
        g_form.fieldChanged(i, false);
    }
}

function saveAssessment() {
	var c = gel('selection_result');
	c.value = 'save';

	var stringValidateSucceed = g_form.verifyStringQnResponseWhenSubmit();
	if (!stringValidateSucceed)  // abort action if validation fails
		return false;

	var valueResults = g_form.valueCheck();
	if (!isEmptyObject(valueResults))
		return showInvalidFieldsMessage(valueResults);

	setHiddenQuestions();
	//Calling function to set the modified property of modified fields to false for DEF0230108, this will be called after the modifications are saved
	resetFieldChangedProperty();
	return true;
}

function cancelAssessment() {
	var c = gel('selection_result');
	c.value = 'cancel';
	//Calling function to set the modified property of modified fields to false for DEF0230108
	resetFieldChangedProperty();
	return true;
}

function closeAssessment() {
	var typeId = gel('type_sysID').value;
	var instanceId = gel('instance_sysID').value;

	try {
		var ga = new GlideAjax('AssessmentUtilsAJAX');
		ga.addParam('sysparm_name', 'removePreview');
		ga.addParam('sysparm_type', typeId);
		ga.addParam('sysparm_instance', instanceId);
		ga.getXMLWait();

		// Bring down the iframe preview window
		parent.gel('FormDialog').gWindow.destroy();
	} catch (e) {
		alert('Exception: ' + e);
	}

	return false;
}

function getDependentQuestions(instanceQuestionId) {
	var childMap = {};
	for ( var value in parentValueChildMap[instanceQuestionId]) {
		if (!value)
			continue;
		var valueChildren = parentValueChildMap[instanceQuestionId][value];
		for (var i = 0; i < valueChildren.length; i++)
			childMap[valueChildren[i]] = true;
	}
	var children = [];
	for ( var childId in childMap) {
		if (!childId)
			continue;
		children.push(childId);
	}
	return children;
}

var templateRowParents;

function getInputValue(input) {
	var value = '';
	if (input) {
		if (input.tagName.toLowerCase() == 'select') {
			var selectedIndex = input.selectedIndex;
			if (selectedIndex >= 0)
				value = input.options[selectedIndex].value;
		} else if (input.type.toLowerCase() == 'checkbox') {
			if(input.id.startsWith('ASMTDEFINITION:'))
				input = gel(input.id);
			else
				input = gel(input.id.substr(3));
			if (input.value == 'true')
				value = '1';
			else
				value = '0';
		} else if (input.type == 'hidden') {
			if (input.value == 'true')
				value = '1';
			else
				value = '0';
		} else
			value = input.value;
	}
	return value;
}

function showDependentQuestions(elem,result) {

	if (typeof parentValueChildMap == 'undefined' || typeof displayedQuestions == 'undefined')
		return;

	var value;
	var instanceQuestionId;
	var fMultipleCheckbox = false;
	if(elem && elem!='undefined' && elem.id && elem.id!='undefined' && elem.id.startsWith('ASMTDEFINITION:'))
		fMultipleCheckbox = true;

	// called in category toggleAssessmentQuestionRows function only, otherwise elem should be an html element and result is null
	if(typeof elem =='string'){
		instanceQuestionId = elem;
		if(result=='true')
			value = 1;
		else if(result=='false')
			value = 0;
		else
			value=result;
	}else{
		instanceQuestionId= elem.name;
		if (!instanceQuestionId)
			instanceQuestionId = elem.id;
		if (instanceQuestionId.indexOf('ni.') == 0)
			instanceQuestionId = instanceQuestionId.substr(3);
		value = getInputValue(elem);
		instanceQuestionId = instanceQuestionId.substr(13);
		if (instanceQuestionId.indexOf('-') > 0)
			instanceQuestionId = instanceQuestionId.substring(0, instanceQuestionId.indexOf('-'));
		if(fMultipleCheckbox)
			instanceQuestionId = elem.id.split("_")[1];
	}
	if (!(instanceQuestionId in parentValueChildMap))
		return;

	templateRowParents = [];
	hideDescendants(instanceQuestionId);
	if(fMultipleCheckbox){
		var map = g_form.questionMap;
		for(var key in map[instanceQuestionId]){
			if(map[instanceQuestionId][key]){
				var defValue = $j(gel('ASMTDEFINITION:'+key+'_'+instanceQuestionId)).attr('definitionvalue');
				showDescendantsByValue(instanceQuestionId, defValue);
			}
		}
	}
	else
		showDescendantsByValue(instanceQuestionId, value);
	for (var i = 0; i < templateRowParents.length; i++)
		updateTemplateGroup(templateRowParents[i]);
}

function showDescendantsByValue(instanceQuestionId, value) {

	// Show the children that should be displayed for the selected value
	var childIdsToShow = parentValueChildMap[instanceQuestionId][value];
	if (!childIdsToShow)
		return;

	for (var i = 0; i < childIdsToShow.length; i++) {
		var r = gel('ASMTQUESTION:' + childIdsToShow[i] + '-row');
		if (r) {
			r.style.display = '';
			var r_1 = gel('label_ASMTQUESTION:' + childIdsToShow[i]);
			r_1.style.display = '';
		}

		if (r.className.indexOf('template_question_row') >= 0 && templateRowParents.indexOf(r.parentNode) < 0)
			templateRowParents.push(r.parentNode);

		var childId = childIdsToShow[i];
		
		var input = $$('#ASMTQUESTION\\:' + childId);
		// radio button cases (more than one for scale, none for template):
		if (input.length > 1 || input.length == 0) {
			input = $$('input:checked[type=radio][name="ASMTQUESTION:' + childId + '"]');
			if (input.length == 0)
				input = null;
			else
				input = input[0];
		} else
			input = input[0];

		var childValue = '';
		if (input)
			childValue = getInputValue(input);

		var map = g_form.questionMap;
		if(childId in map){
			for(var key in map[childId]){
				if(map[childId][key]){
						var defValue = $j(gel('ASMTDEFINITION:'+key+'_'+childId)).attr('definitionvalue');
						showDescendantsByValue(childId, defValue);
					}
			}
		}
		else
			showDescendantsByValue(childId, childValue);
		displayedQuestions[childId] = true;
	}
}

function hideDescendants(instanceQuestionId) {

	// hide all children
	var childIds = getDependentQuestions(instanceQuestionId);
	for (var i = 0; i < childIds.length; i++) {
		var r = gel('ASMTQUESTION:' + childIds[i] + '-row');
		if (r)
			r.style.display = 'none';
		if (r.className.indexOf('template_question_row') >= 0 && templateRowParents.indexOf(r.parentNode) < 0)
			templateRowParents.push(r.parentNode);
		
		hideDescendants(childIds[i]);
		delete displayedQuestions[childIds[i]];
	}
}

function updateTemplateGroup(group) {
	var questionsInGroup;
	var elementsByClassname;
	if (isMSIE6 || isMSIE7 || isMSIE8) {
		elementsByClassname = $$('.template_question_row');
		uniqueIdOfGroup = group.uniqueID;
		questionsInGroup = new Array();
		for (var i = 0; i < elementsByClassname.length; i++) {
			if (uniqueIdOfGroup == elementsByClassname[i].parentElement.uniqueID) {
				questionsInGroup.push(elementsByClassname[i]);
			}
		}
	} else {
		questionsInGroup = group.getElementsByClassName('template_question_row');
	}
	var numHiddenQuestions = 0;
	for (var i = 0; i < questionsInGroup.length; i++) {
		if (questionsInGroup[i].style.display == 'none')
			numHiddenQuestions++;
	}

	var parent = group;
	while (parent.className.indexOf('template_group_row') < 0 && parent.tagName.toLowerCase() != 'body')
		parent = parent.parentNode;

	if (parent.tagName.toLowerCase() != 'tr')
		return;

	if (numHiddenQuestions == questionsInGroup.length)
		parent.style.display = 'none';
	else {
		parent.style.display = '';
		styleTemplateTable(parent);
	}
}

function styleTemplateTable(table) {
	var rows;
	var elementsByClassname;
	var uniqueIdOfParent;

	if (isMSIE6 || isMSIE7 || isMSIE8) {
		elementsByClassname = $$('.template_question_row');
		uniqueIdOfParent = table.uniqueID;
		rows = new Array();
		for (var i = 0; i < elementsByClassname.length; i++) {
			if (uniqueIdOfParent == elementsByClassname[i].parentElement.uniqueID) {
				rows.push(elementsByClassname[i]);
			}
		}
	} else {
		rows = table.getElementsByClassName('template_question_row');
	}
	var cls = 'list_odd';
	for (var i = 0; i < rows.length; i++) {
		rows[i].removeClassName('list_even');
		rows[i].removeClassName('list_odd');

		if (rows[i].style.display != 'none') {
			rows[i].addClassName(cls);
			cls = cls == 'list_odd' ? 'list_even' : 'list_odd';
		}
	}
}

function checkLogin() {	
   var userName = gel('userName').value;
   var userPassword = gel('user_password').value;
   var ga = new GlideAjax("AssessmentVerifySignature");
   ga.addParam("sysparm_name", 'verifySignature');
   ga.addParam("sysparm_user", userName);
   ga.addParam("sysparm_password", userPassword);
   ga.getXMLAnswer(checkLoginResponse);
}

function checkLoginResponse(answer){
   if (answer == 'true'){
	   isSignValid = 'true';
	   gel('invalid_login_img').hide();
	   gel('submit').click();
	   return;
   }  
   loginFailed();
   return false;
}

function loginFailed() {
    gel('invalid_login_img').show();
}

function cancelOverlay() {
	gel('invalid_login_img').hide();
	gel('overlay').hide();
}

function openTaskOverlay(event){
	var url = gel('task_record_url').value;
	
	//clearing the stack, so the user if clicks update or save, it won't show the survey page as that is in the navigation stack history
	if (url != null)
		url = url + '&sysparm_clear_stack=true';
		
	var d = new GlideOverlay({
		title: 'Related Task',
		iframe: url,
		width:'60%',
		height: '80%'
    });
    
    d.setPreference('sysparm_nostack', 'true');
	
	var hideDialogBckBtn = function() {
		var iframe = this.getIFrameElement();
		var D = iframe.contentDocument || iframe.contentWindow.document;
		var backButton = D.getElementsByClassName("btn btn-default icon-chevron-left navbar-btn")[0];
		if(backButton)
			backButton.style.display="none";
	};
	
	d.setOnAfterLoad(hideDialogBckBtn)
	
    d.render();
	event.preventDefault();
}
function closeTaskRecoreMsg(){
	gel('output_messages_container').style.display  = 'none';
}

/*
 This will prevent the enter key from submitting the form (due to the presence of a button of type "submit").
 jElements : jquery array of elements
 */
function suppressEnterKey(jElements) {
	jElements.keypress(function(evt) {
		return !enterKeyPrevented(evt);
	});
}

function enterKeyPrevented(evt) {
	if (evt.which == 13) {
		evt.preventDefault();
		evt.stopPropagation();
		return true;
	} else
		return false;
}]]></client_script>
        <description/>
        <direct>false</direct>
        <endpoint>x_708286_abb_risk_abb_assessment_take2.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
	<j:if test="${GlideMobileExtensions.getDeviceType() != 'doctype'}">
		<g:requires name="scripts/lib/jquery_includes.js" />
	</j:if>
	<g:requires name="scripts/js_includes_assessment.js" includes="true" />

	<!-- Used by dialog e.g. GlideModal -->
	
	<g:evaluate jelly="true" var="jvar_returnUrl">
		var returnUrl = "";
		if (typeof jelly.sysparm_return_url !== "undefined")
			returnUrl = GlideStringUtil.escapeHTML(jelly.sysparm_return_url);
		returnUrl;
	</g:evaluate>

	<j:set var="jvar_hideHeader" value="${sysparm_hide_header}" />
	<j:set var="jvar_hideSubmit" value="${sysparm_hide_submit}" />
	<j:set var="jvar_hideSave" value="${sysparm_hide_save}" />
	<j:set var="jvar_hideCancel" value="${sysparm_hide_cancel}" />
	<j:set var="jvar_hideSourceDetails" value="${sysparm_hide_source_details}" />

	<j:set var="jvar_isComingFromSurveyCreator" value="${sysparm_isSurveyCreator}" />
	<j:set var="jvar_isReaderView" value="${HTML:sysparm_reader_view}" />
	<j:set var="jvar_hidepreview" value="no" />
	<j:set var="jvar_instance" value="${sysparm_instance}"/>
	<j:set var="jvar_triggerTable" value="${sysparm_trigger_table}"/>
	<j:set var="jvar_triggerId" value="${sysparm_trigger_id}"/>
	<g:evaluate jelly="true" var="jvar_button_row_style" copyToPhase2="true">
		var buttonRowStyle = '';
		if (jelly.sysparm_button_row_invisible == 'true'){
			buttonRowStyle = 'display:none';
		}
		buttonRowStyle;
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_assessable_type" copyToPhase2="true">
		var metricTypeId = '';
		if(typeof jelly.sysparm_assessable_type !== 'undefined'){
			metricTypeId = SNC.GlideHTMLSanitizer.sanitize(jelly.sysparm_assessable_type);
			var metricTypeRegex = new RegExp("^\\w{32}$");
			if(!metricTypeRegex.test(metricTypeId)){
				metricTypeId = '';
			}
		}
		metricTypeId;
	</g:evaluate>
	<g:evaluate jelly="true" var="jar_nothing_returned">
		if (typeof jelly.sysparm_lang !== "undefined") {
			var sysLangs = new GlideRecord("sys_language");
			sysLangs.addActiveQuery();
			sysLangs.addQuery("id", jelly.sysparm_lang);
			sysLangs.query();
			if (sysLangs.hasNext() || jelly.sysparm_lang == "en")
				GlideSession.get().getUser().setPreference("user.language", jelly.sysparm_lang);
			else {
				gs.addErrorMessage(gs.getMessage("Language doesn't exist."));
				GlideSession.get().getUser().setPreference("user.language", "en");
		    }
		}
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_hideClose">
		var hideClose = jelly.sysparm_hide_close == 'true';
		hideClose;
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_assessment_type" copyToPhase2="true">
		var metricGR = new GlideRecord("asmt_metric_type");
		metricGR.addQuery('sys_id', jelly.jvar_assessable_type);
		metricGR.query();
		var evaluation_type = gs.getMessage('assessment');
		if (metricGR.next())
			evaluation_type = metricGR.evaluation_method.getChoiceValue().toLowerCase();
		evaluation_type;
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_assessment_type_value">
		var metricGR = new GlideRecord("asmt_metric_type");
		metricGR.addQuery('sys_id', jelly.jvar_assessable_type);
		metricGR.query();
		var assessment_type_value = gs.getMessage('assessment');
		if (metricGR.next())
			assessment_type_value = metricGR.evaluation_method.getValue().toLowerCase();
		assessment_type_value;
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_assessment_type_class">
		var metricGR = new GlideRecord("asmt_metric_type");
		metricGR.addQuery('sys_id', jelly.jvar_assessable_type);
		metricGR.query();
		var assessment_type_class = 'asmt_metric_type';
		if (metricGR.next())
			assessment_type_class = metricGR.sys_class_name.getValue().toLowerCase();
		assessment_type_class;
	</g:evaluate>
	<g:evaluate var="jvar_settings_menu_show_language_picker">
		pm.isActive('com.glide.i18n') ${AND} gs.getProperty('glide.ui.language_picker.enabled', 'true') == 'true' ${AND} gs.getProperty('show_lang_picker_for_publicsurveys') == 'true';
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_is_public_survey">
		var isPublicSurvey = "false";
		var metricGR = new GlideRecord("asmt_metric_type");
		metricGR.addQuery('sys_id', jelly.jvar_assessable_type);
		metricGR.query();
		if (metricGR.next() ${AND} metricGR.allow_public ${AND} jelly.jvar_assessment_type_value == 'survey')
			isPublicSurvey = "true";
		isPublicSurvey;
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_redirect_to_login">
		var isUserLoggedIn = gs.isLoggedIn();
		var redirectLogin = "false";
		if(jelly.jvar_is_public_survey == 'false' ${AND} !isUserLoggedIn)
			redirectLogin = "true";
		redirectLogin;
	</g:evaluate>
	<j:if test="${jvar_redirect_to_login == 'true'}">
		<script language="javascript">document.location.href = "assessment_redirect.do?sysparm_survey_url=${sysparm_this_url}";</script>
	</j:if>
	<g:evaluate jelly="true" var="jvar_assessment_roles">
		var roles = "";
		var metricGR = new GlideRecord("asmt_metric_type");
		metricGR.addQuery('sys_id', jelly.jvar_assessable_type);
		metricGR.query();
		if (metricGR.next())
			roles = metricGR.roles;
		roles;
	</g:evaluate>
	<g:evaluate jelly="true" var="jvar_assessable_sysid" copyToPhase2="true">
		var asmtInstanceId = '';
		if(typeof jelly.sysparm_assessable_sysid !== 'undefined'){
			asmtInstanceId = SNC.GlideHTMLSanitizer.sanitize(jelly.sysparm_assessable_sysid);
			var asmtInstanceRegex = new RegExp("^\\w+$");
			if(!asmtInstanceRegex.test(asmtInstanceId)){
				asmtInstanceId = 'invalidsysid';
			}
		}
		if (asmtInstanceId == '') {
			var instance = new SNC.AssessmentCreation().createOrGetAssessmentWithTrigger(jelly.jvar_assessable_type, '', gs.getUserID(), jelly.jvar_triggerTable, jelly.jvar_triggerId);
		} else if(asmtInstanceId =='invalidsysid'){
			instance = 'invalidsysid';
		}else{
			var temp = new SNC.AssessmentCreation().checkAssessmentAllowed(jelly.jvar_assessable_type, asmtInstanceId, gs.getUserID());
			if (jelly.sysparm_isSurveyCreator == 'yes' || (jelly.jvar_isReaderView == 'true' ${AND} (gs.hasRole('survey_admin,survey_reader,survey_creator') || (new AssessmentUtils()).hasAssessmentRoles(jelly.jvar_assessment_roles))) || (jelly.jvar_assessment_type_class == 'change_risk_asmt' ${AND} gs.hasRole('itil,sn_change_read')))
				var instance = asmtInstanceId;
			else if (temp != "" ${AND} temp != "wip")
				var instance = temp;
			else
				var instance = asmtInstanceId;
		}
		if (instance.substring(0, 6) == 'notyet') {
			var when = instance.substring(6);
			instance = 'notyet';
		}

		// DEF0074222: we should honour HR ACLs when reviewing survey response
		if (jelly.jvar_isReaderView == 'true') {
			var grMetricType = new GlideRecord("asmt_metric_type");
			if (grMetricType.get(jelly.jvar_assessable_type)) {
				if (!grMetricType.canRead())
					instance = 'not_granted_to_review_answer';
			}
		}

		instance;
	</g:evaluate>

	<g:requires name="styles/assessment.css" />
	<j:if test="${jvar_assessable_sysid == 'invalidsysid'}">
		<g:evaluate>
			var msg = gs.getMessage('The assessable record is invalid');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'completed'}">
		<g:evaluate jelly="true">
			var msg = gs.getMessage('You have completed this {0}', jelly.jvar_assessment_type);
			gs.addInfoMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'canceled'}">
		<g:evaluate jelly="true">
			var msg = gs.getMessage('This {0} has been canceled', jelly.jvar_assessment_type);
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>
	
	<g:evaluate var="jvar_inst_due_date" jelly="true">
		var inst_due_date = GlideStringUtil.escapeHTML(jelly.sysparm_inst_due_date);
		inst_due_date;
	</g:evaluate>

	<j:if test="${jvar_assessable_sysid == 'save'}">
		<j:if test="${jvar_inst_due_date == ''}">
			<g:evaluate>
				var msg = gs.getMessage('Your responses have been saved');
				gs.addInfoMessage(msg);
			</g:evaluate>
		</j:if>
		<j:if test="${jvar_inst_due_date != ''}">
			<g:evaluate jelly="true">
				var msgArr = [];
				msgArr.push(jelly.jvar_assessment_type);
				msgArr.push(jelly.jvar_inst_due_date);
				var msg = gs.getMessage('Your responses have been saved. You can complete this {0} before {1}', msgArr);
				gs.addInfoMessage(msg);
			</g:evaluate>
		</j:if>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'cancel'}">
		<j:set var="jvar_isUserLoggedIn" value="${isUserLoggedIn}" />
		<j:if test="${jvar_inst_due_date == '' || !jvar_isUserLoggedIn}">
			<g:evaluate>
				var msg = gs.getMessage('Your responses have not been saved');
				gs.addErrorMessage(msg);
			</g:evaluate>
		</j:if>
		<j:if test="${jvar_inst_due_date != '' &amp;&amp; jvar_isUserLoggedIn}">
			<g:evaluate jelly="true">
				var msgArr = [];
				msgArr.push(jelly.jvar_assessment_type);
				msgArr.push(jelly.jvar_inst_due_date);
				var msg = gs.getMessage('Your responses have not been saved. You can complete this {0} before {1}', msgArr);
				gs.addErrorMessage(msg);
			</g:evaluate>
		</j:if>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'close'}">
		<g:evaluate>
			var msg = gs.getMessage('Preview has been closed');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'notyet'}">
		<g:evaluate>
			var msg = gs.getMessage('You have recently completed this Survey, it will be available in the future');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${(jvar_assessable_sysid == 'not_authorized')}">
		<g:evaluate jelly="true">
			var msg = gs.getMessage('You are not authorized to take this {0}', jelly.jvar_assessment_type);
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${(jvar_assessable_sysid == 'not_granted_to_review_answer')}">
		<g:evaluate jelly="true">
			var msg = gs.getMessage('You are not granted access to review this response');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'not_available'}">
		<g:evaluate jelly="true">
			var msg = gs.getMessage('This {0} is not currently available, check back later', jelly.jvar_assessment_type);
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'invalidtype'}">
		<g:evaluate>
			var msg = gs.getMessage('There was an unexpected failure with this assessment, invalid type provided');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'inactive'}">
		<g:evaluate jelly="true">
			var msg = gs.getMessage('This {0} is no longer active', jelly.jvar_assessment_type);
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'draft_state'}">
		<g:evaluate jelly="true">
			var msg = gs.getMessage('This {0} has not yet been published', jelly.jvar_assessment_type);
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'isscheduled'}">
		<g:evaluate>
			var msg = gs.getMessage('An incorrect assessment or survey was provided - on demand expected');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'notsurvey'}">
		<g:evaluate>
			var msg = gs.getMessage('An incorrect assessment was provided - survey expected');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'nousers'}">
		<g:evaluate>
			var msg = gs.getMessage('Unable to generate assessment, no user was provided');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid == 'nosources'}">
		<g:evaluate>
			var msg = gs.getMessage('Unable to generate assessment, no source was provided');
			gs.addErrorMessage(msg);
		</g:evaluate>
	</j:if>

	<j:if test="${jvar_assessable_sysid.length() == 32}">
		<g:evaluate var="jvar_preview">
			var isPreview = false;
			var gr = new GlideRecord("asmt_assessment_instance");
			gr.get(instance);
			if (gr.isValidRecord())
			isPreview = gr.getValue("preview");
		</g:evaluate>
		<g:evaluate var="jvar_task_record_url">
			var gr = new GlideRecord("asmt_assessment_instance");
			gr.get(instance);
			var task_record = "";
			var task_table = "";
			var task_record_url = "";
			if (gr.trigger_table) {
				task_record_url = gr.trigger_table + ".do?sys_id=" + gr.trigger_id;
				var task_number = gr.trigger_id.task_effective_number;
				task_table = task_number ? gs.getMessage("Task") : gr.getDisplayValue('trigger_id').split(': ')[0];
				task_record = task_number ? task_number.toString() : gr.getDisplayValue('trigger_id').split(': ')[1];
			}
			task_record_url;
		</g:evaluate>	
		<g:evaluate var="jvar_instance_number">
			var gr = new GlideRecord("asmt_assessment_instance");
			gr.get(instance);
			var instance_number = "";
			instance_number = gr.number;
			instance_number;
		</g:evaluate>
	</j:if>
	<j:if test="${jvar_assessable_sysid.length() != 32}">
		<g:evaluate var="jvar_preview">
			var isPreview = false;
		</g:evaluate>
		<g:evaluate var="jvar_task_record_url">
			var task_record_url = "";
			var task_record = "";
			var task_table="";
		</g:evaluate>
	</j:if>
	<j:if test="${isPreview == true}">
		<g:evaluate jelly="true" var="jvar_hidepreview">
			if (jelly.sysparm_isSurveyCreator == 'yes') {
			value = 'no';
			} else {
			var metricGR = new GlideRecord("asmt_metric_type");
			metricGR.addQuery('sys_id', jelly.jvar_assessable_type);
			metricGR.query();
			if (metricGR.next())
			metricGR.deleteRecord();
			value = "yes";
			}
		</g:evaluate>

		<j:if test="${jvar_isComingFromSurveyCreator != 'yes'}">
			<g:evaluate>
				var msg = gs.getMessage('This preview instance has not been saved.');
				gs.addErrorMessage(msg);
			</g:evaluate>
		</j:if>
	</j:if>

	<g:ui_form>
		<input type="hidden" id="type_sysID" name="type_sysID" value="${jvar_assessable_type}" />
		<input type="hidden" id="instance_sysID" name="instance_sysID" value="${jvar_assessable_sysid}" />
		<input type="hidden" id="selection_result" name="selection_result" value="" />
		<input type="hidden" id="hiddenQuestions" name="hiddenQuestions" value="" />
		<input type="hidden" id="attachmentQuestions" name="attachmentQuestions" value="" />
		<input name="sys_target" id="sys_target" type="HIDDEN" value="asmt_assessment_instance" />
		<input name="sys_uniqueValue" id="sys_uniqueValue" type="HIDDEN" value="${jvar_assessable_sysid}" />
		<j:if test="${jvar_returnUrl != ''}">
			<input name="sysparm_return_url" id="sysparm_return_url" type="HIDDEN" value="${jvar_returnUrl}" />
		</j:if>
		<j:if test="${jvar_hidepreview == 'no'}">
			<g2:evaluate jelly="true" var="jvar_type" expression="var typeGR = '';
				var instanceGR = new GlideRecord('asmt_assessment_instance');
				instanceGR.addQuery('sys_id', jelly.jvar_assessable_sysid);
				instanceGR.query();
				if (instanceGR.next()) {
					typeGR = new GlideRecord('asmt_metric_type');
					typeGR.addQuery('sys_id', instanceGR.metric_type);
					typeGR.query();
				}" />
			<j2:if test="$[typeof typeGR == 'object']">
				<j2:if test="$[typeGR.next()]">
					<j:if test="${jvar_hideHeader != 'true'}">
						<nav class="navbar navbar-default">
							<div class="container-fluid">
								<div class="navbar-header">
									<j:if test="${jvar_instance!= '' &amp;&amp; jvar_instance}">
										<button title="Back" class="btn btn-default icon-chevron-left navbar-btn" onclick="return clickBack('$[JS:sysparm_view]','$[JS:sysparm_record_list]')" data-original-title="Back">
											<span class="sr-only">Back</span>
										</button>
										<h1 class="form_header navbar-title navbar-title-twoline">
											<div>
												<div class="navbar-title-caption">$[typeGR.name]</div>
												<div class="navbar-title-display-value">${jvar_instance_number}</div>
											</div>
										</h1>
									</j:if>
									<j:if test="${!jvar_instance}">
										<h1 class="navbar-title">$[typeGR.name]</h1>
									</j:if>
								</div>
								<div class="nav navbar-right">
									<j:if test="${isPreview != true}">
										<j:if test="${ jvar_isReaderView != 'true'}">
											<j:if test="${jvar_is_public_survey == 'true' &amp;&amp; jvar_settings_menu_show_language_picker}">
												<g:asmt_languages_new_ui />
											</j:if>
											<j:if test="${jvar_hideSubmit != 'true'}">
												<button class="btn btn-primary navbar-btn" type="submit" onClick="return submitAssessment();" id="submit" name="submit">${gs.getMessage('Submit')}</button>
											</j:if>
											<j:if test="${isUserLoggedIn}">
												<j:if test="${jvar_hideSave != 'true'}">
													<button class="btn btn-default navbar-btn" type="submit" onClick="return saveAssessment();" id="save" name="save">${gs.getMessage('Save')}</button>
												</j:if>
											</j:if>
											<j:if test="${jvar_hideCancel != 'true'}">
												<button class="btn btn-default navbar-btn" type="submit" onClick="return cancelAssessment();" id="cancel" name="cancel">${gs.getMessage('Cancel')}</button>
											</j:if>
											<div style="clear: both;"></div>
										</j:if>
									</j:if>
									<j:if test="${jvar_instance!= '' &amp;&amp; jvar_instance &amp;&amp; sysparm_record_row != null}">
										<j:set var="jvar_iterate_update" value="${gs.getProperty('glide.ui.update_on_iterate','true') === 'true'}"/> 
										<j2:if test="$[sysparm_record_row != '1']"> 
											<button query="$[sysparm_record_list]" onclick="iterateList1('$[JS:sysparm_view]','$[JS:sysparm_record_list]', '$[JS:sysparm_record_row]', 'sysverb_record_previous', ${jvar_iterate_update},'$[JS:sysparm_record_rows]')" aria-label="${gs.getMessage('Previous record')} ($[sysparm_record_row - 1] of $[sysparm_record_rows])" class="btn btn-icon icon-arrow-up" title="${gs.getMessage('Previous record')} ($[sysparm_record_row - 1] of $[sysparm_record_rows])"> 
												<span class="sr-only"> ${gs.getMessage('Previous record')} ($[sysparm_record_row - 1] of $[sysparm_record_rows]) </span> 
											</button> 
										</j2:if> 
										<j2:if test="$[sysparm_record_row == '1']"> 
											<button aria-label="${gs.getMessage('Top of list displayed')}" class="btn btn-icon icon-arrow-up" disabled="true" title="${gs.getMessage('Top of list displayed')}"> 
												<span class="sr-only"> ${gs.getMessage('Top of list displayed')} </span> 
											</button> 
										</j2:if> 
										<j2:set var="jvar_t" value="$[sysparm_record_row.equals(sysparm_record_rows)]"/> 
										<j2:if test="$[jvar_t == 'false']"> 
											<button type="image" query="evaluation_method=survey^active=true^ORDERBYname" onclick="iterateList1('$[JS:sysparm_view]','$[JS:sysparm_record_list]', '$[JS:sysparm_record_row]', 'sysverb_record_next', ${jvar_iterate_update},'$[JS:sysparm_record_rows]')" aria-label="${gs.getMessage('Next record')} ($[sysparm_record_row + 1] of $[sysparm_record_rows])" class="btn btn-icon icon-arrow-down" title="${gs.getMessage('Next record')} ($[sysparm_record_row + 1] of $[sysparm_record_rows])">
												<span class="sr-only">${gs.getMessage('Next record')} ($[sysparm_record_row + 1] of $[sysparm_record_rows])</span>
											</button> 
										</j2:if> 
									</j:if>
								</div>
							</div>
						</nav>
					</j:if>
					<j:if test="${jvar_task_record_url != ''}">
						<input type="hidden" value="${jvar_task_record_url}" name="task_record_url" id="task_record_url"/>
						<g2:evaluate jelly="true">
							var msgArr = [];
							msgArr.push(jelly.jvar_assessment_type);
							msgArr.push(task_table);
						</g2:evaluate>
						<j2:if test="$[GlideMobileExtensions.getDeviceType() == 'doctype']">
							<div class="notification notification-info">
								$[gs.getMessage('This {0} is in regards to {1}: ', msgArr)]
								<a onClick="openTaskOverlay(event)" class="related-task-link">${task_record}</a>
								<button data-dismiss="alert" class="btn btn-icon close icon-cross">
									<span class="sr-only">Close</span>
								</button>
							</div>
						</j2:if>
						<j2:if test="$[GlideMobileExtensions.getDeviceType() != 'doctype']">
							<div id="output_messages_container" class="outputmsg_container">
								<img class="outputmsg_close" src="images/x.gifx" onclick="closeTaskRecoreMsg()" alt="${gs.getMessage('Close Messages')}" />
								<div class="outputmsg outputmsg_info">
									<img class="outputmsg_image" src="images/outputmsg_info_24.gifx" alt="${gs.getMessage('Informational Message')}" title="${gs.getMessage('Informational Message')}" />
									<div class="outputmsg_text">
										$[gs.getMessage('This {0} is in regards to {1}: ', msgArr)]
										<a onClick="openTaskOverlay(event)" class="related-task-link">${task_record}</a>
									</div>
								</div>
							</div>
						</j2:if>
					</j:if>
					<j2:if test="$[NS:typeGR.not_show_intro_note != true]">
						<div class="introduction">
							<!-- end_note may contain HTML formatting -->
							<g2:no_escape>$[NS:typeGR.introduction]</g2:no_escape>
						</div>
					</j2:if>				 
				</j2:if>
			</j2:if>
			<div class="assessment" data-form-title="$[HTML: gs.getMessage('Take {0}', '${jvar_assessment_type}')]">
			
				<table class="wrap">
					<tbody>
						<g2:com.snc.assessment_core_take assessment="${jvar_assessable_sysid}" read="${jvar_isReaderView}" />
					</tbody>
					<j:if test="${jvar_assessable_sysid.length() == 32}">
						<g2:evaluate jelly="true">
							var instanceGR = new GlideRecord('asmt_assessment_instance');
							instanceGR.addQuery('sys_id', jelly.jvar_assessable_sysid);
							instanceGR.query();
							var signatureGR = null;
							if (instanceGR.next()) {
							if (!instanceGR.signature.nil()) {
							signatureGR = new GlideRecord('asmt_signature');
							signatureGR.get(instanceGR.signature);
							}
							}
						</g2:evaluate>

						<tfoot>
							<tr>
								<td>
									<j2:if test="$[ signatureGR != null &amp;&amp; isUserLoggedIn]">
										<input type="hidden" name="jvar_signature_type" id="jvar_signature_type" value="$[signatureGR.type]" />
										<div class="signature">
											<div class="assertion">
												<j2:if test="$[ signatureGR.type == 'checkbox' ]">
													<div id="checkbox">
														<j:if test="${jvar_isReaderView == 'true'}">
															<j2:if test="$[ instanceGR.signature_result == 'checked' &amp;&amp; instanceGR.state == 'complete' ]">
																<input type='checkbox' id='signature_result' name='signature_result' value='checked' checked='true' readonly='readonly' disabled="" />
															</j2:if>
															<j2:if test="$[ instanceGR.signature_result != 'checked' || instanceGR.state != 'complete']">
																<input type='checkbox' id='signature_result' name='signature_result' value='' readonly='readonly' disabled="" />
															</j2:if>
														</j:if>
														<j:if test="${jvar_isReaderView != 'true'}">
															<input type='checkbox' id='signature_result' name='signature_result' value='checked' />
														</j:if>
														<g2:no_escape>$[NS:signatureGR.assertion]</g2:no_escape>
													</div>
												</j2:if>

												<j2:if test="$[ signatureGR.type == 'full_name' ]">
													<div id="type_name">
														<g2:no_escape>$[NS:signatureGR.assertion]</g2:no_escape>
														<input type='text' id='signature_result' name='signature_result' size='35' readonly='true' />
													</div>
												</j2:if>

												<j2:if test="$[ signatureGR.type == 'assertion_only' ]">
													<div id="no_assertion">
														<g2:no_escape>$[NS:signatureGR.assertion]</g2:no_escape>
													</div>
												</j2:if>
											</div>

											<div class="assessmentButtonRow" style="${jvar_button_row_style}">
												<j:if test="${isPreview != true}">
													<j:if test="${jvar_isReaderView != 'true'}">
														<j:if test="${jvar_hideSubmit != 'true'}">
															<button class="btn btn-primary" type="submit" onClick="return submitAssessment();" id="submit_bottom" name="submit">${gs.getMessage('Submit')}</button>
														</j:if>
														<!-- Why does this not check: isUserLoggedIn -->
														<j:if test="${jvar_hideSave != 'true'}">
															<button class="btn btn-default" type="submit" onClick="return saveAssessment();" id="save_bottom" name="save">${gs.getMessage('Save')}</button>
														</j:if>
														<j:if test="${jvar_hideCancel != 'true'}">
															<button class="btn btn-default" type="submit" onClick="return cancelAssessment();" id="cancel_bottom" name="cancel">${gs.getMessage('Cancel')}</button>
														</j:if>
													</j:if>
												</j:if>
												<j:if test="${isPreview == true}">
													<j:if test="${hideClose != true}">
														<button class="button listactions" type="submit" onClick="return closeAssessment();" id="close" name="close">${gs.getMessage('Close')}
														</button>
													</j:if>
												</j:if>
											</div>
										</div>
									</j2:if>

									<j2:if test="$[ signatureGR == null ]">
										<div class="assessmentButtonRow" style="${jvar_button_row_style}">
											<j:if test="${isPreview != true}">
												<j:if test="${ jvar_isReaderView != 'true'}">
													<j:if test="${jvar_hideSubmit != 'true'}">
														<button class="btn btn-primary" type="submit" onClick="return submitAssessment();" id="submit_sign" name="submit">${gs.getMessage('Submit')}</button>
													</j:if>
													<j:if test="${isUserLoggedIn}">
														<j:if test="${jvar_hideSave != 'true'}">
															<button class="btn btn-default navbar-btn" type="submit" onClick="return saveAssessment();" id="save_sign" name="save">${gs.getMessage('Save')}</button>
														</j:if>
													</j:if>
													<j:if test="${jvar_hideCancel != 'true'}">
														<button class="btn btn-default" type="submit" onClick="return cancelAssessment();" id="cancel_sign" name="cancel">${gs.getMessage('Cancel')}</button>
													</j:if>
												</j:if>
											</j:if>

											<j:if test="${isPreview == true}">
												<j:if test="${hideClose != true}">
													<button class="button listactions" type="submit" onClick="return closeAssessment();" id="close_sign" name="close">${gs.getMessage('Close')}
													</button>
												</j:if>
											</j:if>
										</div>
									</j2:if>
								</td>
							</tr>
						</tfoot>
					</j:if>
				</table>
			</div>
		</j:if>


		<j2:if test="${gs.getProperty('com.snc.assessment.signature_authentication')=='false'}">
			<j2:set var='jvar_signature_authentication' value='false' />
		</j2:if>
		<j2:if test="${gs.getProperty('com.snc.assessment.signature_authentication')=='true'}">
			<j2:set var='jvar_signature_authentication' value='true' />
		</j2:if>


		<div id='overlay'>
			<div id="Authentication">
				<input type="hidden" name="jvar_signature_authentication" id="jvar_signature_authentication" value="$[jvar_signature_authentication]" />
				<input type="hidden" id="approve_edit" name="approve_edit" value="false" />
				<input type="hidden" id="approved" name="approved" value="false" />
				<input type="hidden" id="sysapproval_id" name="sysapproval_id" value="${sysparm_approval_id}" />
				<table id="authenticate_table">
					<tr style="vertical-align: top;">
						<td colspan="2">
							<table id="authentication_header" style="width:100%; font-weight:bold; background-color:#eee;">
								<tbody>
									<tr>
										<td style="vertical-align: middle; width:100%;">
											Signature Authentication
										</td>
										<td style="text-align: right;">
											<span>
												<img id="popup_close_image" height="12" onclick="cancelOverlay()" style="vertical-align: top; cursor: pointer;" width="12" src="images/x.gifx" class="" />
											</span>
										</td>
									</tr>
								</tbody>
							</table>
						</td>
					</tr>
					<tr>
						<td>${gs.getMessage('User name:')}</td>
						<td>
							<input type="text" name="userName" id="userName" readonly='true' />
						</td>
					</tr>
					<tr>
						<td>${gs.getMessage('Password')}:</td>
						<td>
							<input type="password" name="user_password" id="user_password" />
						</td>
					</tr>
					<tr id="invalid_login_img" style="display:none">
						<td colspan="2">
							<table>
								<tr>
									<td>
										<img src="./images/error.gifx" />
									</td>
									<td width="100%">
										<SPAN id="invalid_login_text" style="font-weight:bold;">
											${gs.getMessage('Password invalid')}
										</SPAN>
									</td>
								</tr>
							</table>
						</td>
					</tr>
					<tr id="dialog_buttons">
						<td colspan="2" align="center">
							<button type="submit" onClick="checkLogin();return false;" id="ok" name="ok">${gs.getMessage('Ok')}</button>$[SP]
							<button type="submit" onClick="cancelOverlay();return false;" id="quit" name="quit">${gs.getMessage('Cancel')}</button>
						</td>
					</tr>
				</table>
			</div>
			<!-- overlay -->
		</div>
	</g:ui_form>

	<!-- emit g_user support -->
	<g2:client_script type="user" />
</j:jelly>]]></html>
        <name>abb_assessment_take2</name>
        <processing_script><![CDATA[(function(_this) {
	function saveAssessment() {
		if (!instance_sysID) {
			gs.error('[assessment_take2]: Missing instance sys_id');
			response.sendRedirect('home.do');
			return;
		}

		var inst = new GlideRecord("asmt_assessment_instance");
		if (!inst.get(instance_sysID)) {
			gs.error('[assessment_take2]: Invalid instance sys_id');
			response.sendRedirect('home.do');
			return;
		}

		var user = gs.getUserID();
		var assignee = inst.getValue('user');
		if (!(new SNC.AssessmentCreation().isGuestUserTakingPublicSurvey(inst.getValue('metric_type'), user)) && assignee !== user) {
			gs.error('[assessment_take2]: Unauthorized assessment taker');
			response.sendRedirect('home.do');
			return;
		}

		var hq = {};
		if (typeof hiddenQuestions != 'undefined')
			hq = (new JSONParser()).parse(hiddenQuestions);
		hiddenQuestions = hq;

		var aq = "";
		if(typeof attachmentQuestions != 'undefined')
			aq = attachmentQuestions;
		attachmentQuestions = aq;

		var status = inst.state;
		var questionCount = 0;
		var questionAnswer = 0;
		var questionMap = {};
		var questionDefinitionMap = {};
		var definitionValueMap = {};
		var retake = false;
		var due = new GlideDateTime(inst.due_date);
		var now = new GlideDateTime().getLocalDate();
		if ((status == 'complete') && (inst.metric_type.allow_retake) && (now.compareTo(due) != 1)) {
			status = 'wip'; // Store new results when saving a completed instance and retake is allowed.
			retake = true;
		}
		if (status == 'wip' || status == 'ready') {
			for ( var params in _this) {
				if (params.startsWith('ASMTQUESTION:')) {
					var value = _this[params];
					var questionId = params.substring('ASMTQUESTION:'.length, params.length);
					var result = saveResponse(questionId, value, selection_result);
					if (result > 0)
						++questionAnswer;
				}
				if (params.startsWith('sys_original.ASMTQUESTION:')) {
					var qId = params.substring('sys_original.ASMTQUESTION:'.length, params.length);
					if (qId in hiddenQuestions) {
						if(attachmentQuestions.indexOf(qId) >=0){
							var attachment = _this[params].split(",");
							for(var i=0;i<attachment.length;i++){
								var sa = new GlideSysAttachment();
								sa.deleteAttachment(attachment[i]);
							}
						}

						// Set 'is_hidden' to true in order not to generate metric result for this question
						var grQstInstnace = new GlideRecord("asmt_assessment_instance_question");
						if (grQstInstnace.get(qId)) {
							grQstInstnace.is_hidden = true;
							grQstInstnace.update();
						}
					} else {
						var attachmentGR = new GlideRecord('sys_attachment');
						attachmentGR.addQuery('table_name','asmt_assessment_instance_question');
						attachmentGR.addQuery('table_sys_id',qId);
						attachmentGR.query();
						if(attachmentGR.hasNext())
							++questionAnswer;
						++questionCount;
					}
				}
				if(params.startsWith('ASMTDEFINITION:')){
					var definitionId = params.substring('ASMTDEFINITION:'.length, 'ASMTDEFINITION:'.length + 32);
					var questionId = params.split('_')[1];
					var selected = (GlideStringUtil.nil(_this[params]) || _this[params] == "false") ?  false : true;

					if(questionId in questionMap){
						if(!questionMap[questionId] && selected)
							questionMap[questionId] = true;
					}
					else
						questionMap[questionId] = selected;

					if(selected){
						if(questionId in questionDefinitionMap)
							questionDefinitionMap[questionId] += ","+definitionId;
						else
							questionDefinitionMap[questionId] = definitionId;
					}

				} else if (params.startsWith('ASMTDEFINITIONRANK:')) {
					var definitionId = params.substring('ASMTDEFINITIONRANK:'.length, 'ASMTDEFINITIONRANK:'.length + 32);
					var questionId = params.split('_')[1];
					var sourceId = params.split('_')[2];
					var value = _this[params];
					questionMap[questionId] = "RANKING";

					if(questionId in questionDefinitionMap)
						questionDefinitionMap[questionId] += ","+definitionId;
					else
						questionDefinitionMap[questionId] = definitionId;

					definitionValueMap[definitionId + '_' + sourceId] = value;
				}
				if (params.startsWith('ADDINFO:ASMTQUESTION:')) {
					var questionId = params.substring('ADDINFO:ASMTQUESTION:'.length, params.length);
					var qst = new GlideRecord("asmt_assessment_instance_question");
					if (qst.get(questionId)) {
						qst.add_info = _this[params];
						qst.update();
					}
				}
			}

			for(var key in questionMap){
				var isHidden = (key in hiddenQuestions) ? true : false;
				var qst = new GlideRecord("asmt_assessment_instance_question");
				qst.get(key);
				var source_table = qst.source_table;
				var source_id = qst.source_id;
				var metric = qst.metric;
				var category = qst.category;
				var instance = qst.instance;
				var metric_type_group = qst.metric_type_group;

				//delete
				var gr = new GlideRecord("asmt_assessment_instance_question");
				gr.addQuery('instance',instance);
				gr.addQuery('metric',metric);
				gr.addQuery('source_id',source_id);
				gr.addQuery('category',category);
				gr.deleteMultiple();


				if(questionMap[key] && !isHidden){
					++questionAnswer;

					//insert for all values
					var arr = questionDefinitionMap[key].split(",");
					for(var i=0;i<arr.length;i++){
						var definitionId = arr[i];
						var metricDef = new GlideRecord('asmt_metric_definition');
						metricDef.addQuery('sys_id',definitionId);
						metricDef.query();
						if(metricDef.next()){
							var qstRecord = new GlideRecord("asmt_assessment_instance_question");
							qstRecord.initialize();
							qstRecord.source_table = source_table;
							qstRecord.source_id = source_id;
							qstRecord.metric = metric;
							qstRecord.category = category;
							qstRecord.instance = instance;
							qstRecord.is_hidden = isHidden;
							qstRecord.metric_definition = definitionId;
							qstRecord.metric_type_group = metric_type_group;
							if(!GlideStringUtil.nil(questionMap[key]) && questionMap[key] == "RANKING"){
								qstRecord.value = definitionValueMap[definitionId + '_' + source_id];
							}
							else
								qstRecord.value = metricDef.getValue("value").toString();
							qstRecord.add_info = _this["ADDINFO:ASMTQUESTION:" + key];
							qstRecord.insert();
						}
					}
				}
				else{
					//insert
					var qstRecord = new GlideRecord("asmt_assessment_instance_question");
					qstRecord.initialize();
					qstRecord.source_table = source_table;
					qstRecord.source_id = source_id;
					qstRecord.metric = metric;
					qstRecord.category = category;
					qstRecord.instance = instance;
					qstRecord.metric_type_group = metric_type_group;
					qstRecord.add_info = _this["ADDINFO:ASMTQUESTION:" + key];
					qstRecord.is_hidden = isHidden;
					qstRecord.insert();
				}
				if(!isHidden)
					++questionCount;
			}

			inst.signature_result = (_this['signature_result']).trim();
			if(selection_result=='submit')
				inst.taken_on = new GlideDateTime();
			saveStatus(inst, questionCount, questionAnswer, retake);
		}
	}

	function saveResponse(questionId, value, selection_result) {
		var qst = new GlideRecord("asmt_assessment_instance_question");
		qst.get(questionId);
		var returnValue = 0;
		if (qst.isValid()) {
			qst.is_hidden = false;
			if (questionId in hiddenQuestions) {
				qst.value = '';
				qst.string_value = '';
				qst.is_hidden = true;
			} else if ('string,datetime'.indexOf(qst.metric.datatype) >= 0) {
				qst.value = 0;
				qst.string_value = value;
				if (value)
					returnValue = 1;
				else
					returnValue = -1;
			} else if ('checkbox'.indexOf(qst.metric.datatype) >= 0) {
				returnValue = 1;
				if (value == 'true' || value == 'on') {
					qst.value = 1;
					qst.string_value = 'true';
				} else {
					qst.value = 0;
					qst.string_value = 'false';
				}
			} else if ('reference'.indexOf(qst.metric.datatype)>=0){
				qst.reference_id = value;
				if (value)
					returnValue = 1;
				else
					returnValue = -1;
			} else if ('custom'.indexOf(qst.metric.datatype) >= 0){
				'number'.indexOf(qst.metric.custom_metric.result_type) >= 0 ? qst.value = parseInt(value) : qst.string_value = value;
				returnValue = !!value ? 1 : -1;
			} else {
				qst.value = value;
				if (value)
					returnValue = 1;
				else
					returnValue = -1;
			}
			qst.update();
		}
		return returnValue;
	}

	function saveStatus(inst, questionCount, questionAnswer, retake) {
		inst.percent_answered = ((questionAnswer * 100) / questionCount);
		if (selection_result == 'submit') {
			if (retake) {
				inst.state = "wip";
				inst.update();
			}
			inst.state = "complete";
			inst.update();
		} else if (selection_result == 'save') {
			if (inst.state != "complete")
				inst.state = "wip";
			inst.update();
		}
	}

	if (selection_result != 'cancel' && selection_result != 'close')
		saveAssessment();

	if (selection_result == 'close')
		(new SNC.AssessmentCreation()).removePreview(instance_sysID);

	var type = new GlideRecord("asmt_metric_type");
	type.get(type_sysID);

	var url = ''; 
	if(typeof sysparm_return_url!== 'undefined')
		url = GlideStringUtil.unEscapeHTML(sysparm_return_url);
	if (selection_result == 'submit') {
		if (type.url != '')
			url = type.url;
		else if (url == '') {
			url = 'assessment_thanks.do?sysparm_assessable_type=' + type_sysID.toString() + '&sysparm_assessment_type=' + type.evaluation_method.getChoiceValue().toLowerCase();
		}
	} else {
		var inst = new GlideRecord("asmt_assessment_instance");
		inst.get(instance_sysID);
		if (url == '') {
			url = 'assessment_take2.do?sysparm_assessable_type=' + type_sysID.toString() + '&sysparm_assessable_sysid=' + selection_result;
			if (inst)
				url += '&sysparm_inst_due_date=' + inst.getValue('due_date');
		}
	}
	response.sendRedirect(url);
})(this);]]></processing_script>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>hyc</sys_created_by>
        <sys_created_on>2023-02-09 21:46:50</sys_created_on>
        <sys_id>296111af2fbc691076befe7cf699b672</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>abb_assessment_take2</sys_name>
        <sys_package display_value="ABB Risk" source="x_708286_abb_risk">8e2eb2972f34691076befe7cf699b605</sys_package>
        <sys_policy/>
        <sys_scope display_value="ABB Risk">8e2eb2972f34691076befe7cf699b605</sys_scope>
        <sys_update_name>sys_ui_page_296111af2fbc691076befe7cf699b672</sys_update_name>
        <sys_updated_by>hyc</sys_updated_by>
        <sys_updated_on>2023-02-09 21:47:00</sys_updated_on>
    </sys_ui_page>
</record_update>
